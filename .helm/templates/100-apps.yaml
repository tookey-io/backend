---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "backend"
  namespace: "{{ $.Release.Namespace }}"
  labels:
    service: "backend"
spec:
  replicas: 1
  minReadySeconds: 15
  selector:
    matchLabels:
      service: "backend"
  template:
    metadata:
      labels:
        service: "backend"
    spec:
      containers:
        - name: service
          image: {{ $.Values.image }}
          livenessProbe:
            exec:
              command: [ "/bin/sh", "/app/bin/liveness.sh" ]
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: [ "/bin/sh", "/app/bin/readiness.sh" ]
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
          env:
            - name: CORS_ORIGINS
              value: https://backend.{{ $.Release.Namespace }}.tookey.cloud,http://automation.{{ $.Release.Namespace }}.tookey.cloud,http://app.{{ $.Release.Namespace }}.tookey.cloud
            - name: GOOGLE_APPLICATION_CREDENTIALS
              value: /etc/gcp/sa_credentials.json
          envFrom:
            - secretRef:
                name: backend-env
                optional: false
          resources:
            limits:
              cpu: 4000m
              memory: 4096Mi
            requests:
              cpu: 200m
              memory: 256Mi
          ports:
            - name: "http"
              containerPort: 3000
          volumeMounts: 
            - name: service-account-credentials-volume
              mountPath: /etc/gcp
              readOnly: true
      volumes:
        - name: service-account-credentials-volume
          secret: 
            secretName: backend-service-account-credentials
            items:
              - key: sa_json
                path: sa_credentials.json

---
apiVersion: v1
kind: Service
metadata:
  name: "backend"
  namespace: "{{ $.Release.Namespace }}"
spec:
  type: ClusterIP
  selector:
    service: "backend"
  ports:
    - port: 80
      targetPort: 3000
      name: "http"

---
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: "backend"
  namespace: "{{ $.Release.Namespace }}"
spec:
  entryPoints:
    - websecure
  routes:
    - match: "Host(`backend.{{ $.Release.Namespace }}.tookey.cloud`)"
      kind: Rule
      middlewares:
        - name: allow-cors
          namespace: {{ $.Release.Namespace }}
      services:
        - name: backend
          port: 80
  tls:
    certResolver: main-le
